# .github/workflows/build_p4a.yml

name: Android Kivy Build (Python-for-Android)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_android_apk:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Specify a Python version compatible with Kivy/p4a

    - name: Install p4a dependencies and Java JDK
      # Install system dependencies required by python-for-android
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libtool \
          pkg-config \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          zlib1g-dev \
          libffi-dev \
          libssl-dev \
          openjdk-17-jdk \
          git \
          zip \
          unzip \
          patchelf \
          curl \
          wget # Added wget as an alternative for downloading if curl fails for some reason

    - name: Install python-for-android via pip
      run: |
        pip install --upgrade pip setuptools
        pip install cython==0.29.36 # Specific Cython version often needed for p4a compatibility
        pip install python-for-android

    - name: Setup Android SDK and NDK
      # This step downloads and configures the Android SDK and NDK
      # It creates the necessary directories and sets up environment variables.
      run: |
        ANDROID_SDK_ROOT=$HOME/android-sdk
        ANDROID_NDK_HOME=$HOME/android-ndk
        mkdir -p $ANDROID_SDK_ROOT
        mkdir -p $ANDROID_NDK_HOME

        # Download Android SDK Command Line Tools
        SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
        echo "Downloading SDK Command Line Tools from: $SDK_TOOLS_URL"
        curl -fL -o /tmp/sdk-tools.zip $SDK_TOOLS_URL || wget -O /tmp/sdk-tools.zip $SDK_TOOLS_URL
        
        echo "Unzipping SDK Command Line Tools..."
        unzip /tmp/sdk-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
        mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest

        # Set ANDROID_HOME and add sdkmanager to PATH
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

        # Accept Android SDK licenses
        echo "Accepting Android SDK licenses..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses

        # Install specific Android SDK platforms and build tools
        echo "Installing Android SDK platform and build tools..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-33" "build-tools;33.0.0"

        # Download Android NDK - Fixed URL and added -fL for robustness, with wget fallback
        NDK_VERSION="25b" # NDK 25b
        NDK_URL="https://dl.google.com/android/repository/android-ndk-r${NDK_VERSION}-linux.zip"
        echo "Downloading Android NDK from: $NDK_URL"
        curl -fL -o /tmp/ndk.zip $NDK_URL || wget -O /tmp/ndk.zip $NDK_URL
        
        echo "Verifying NDK download..."
        ls -lh /tmp/ndk.zip
        file /tmp/ndk.zip

        echo "Unzipping NDK..."
        unzip /tmp/ndk.zip -d $ANDROID_NDK_HOME
        mv $ANDROID_NDK_HOME/android-ndk-r${NDK_VERSION} $ANDROID_NDK_HOME/current_ndk

        # Set NDK_HOME
        echo "NDK_HOME=$ANDROID_NDK_HOME/current_ndk" >> $GITHUB_ENV

        # Verify environment variables
        echo "ANDROID_HOME is $ANDROID_HOME"
        echo "NDK_HOME is $NDK_HOME"
        echo "PATH is $PATH"


    - name: Create p4a distribution and build APK
      # Directly call python-for-android commands
      run: |
        # Define application properties
        APP_NAME="Guess the Number"
        PACKAGE_NAME="com.example.guessthenumber"
        APP_VERSION="1.0"
        APP_MAIN_FILE="main.py"
        APP_REQUIREMENTS="kivy"
        ANDROID_API_LEVEL=21 # Minimum API level
        TARGET_ARCH="arm64-v8a" # Target architecture

        echo "Creating p4a distribution..."
        python3 -m p4a create \
            --dist-name guessingapp \
            --sdk-dir "${{ env.ANDROID_HOME }}" \
            --ndk-dir "${{ env.NDK_HOME }}" \
            --requirements "${APP_REQUIREMENTS}" \
            --arch "${TARGET_ARCH}" \
            --target android \
            --bootstrap sdl2 \
            --no-setup-py \
            --copy-libs \
            --color=always \
            --verbose \
            --debug \
            --permission INTERNET

        echo "Building APK..."
        python3 -m p4a build \
            --dist-name guessingapp \
            --release \
            --android-api "${ANDROID_API_LEVEL}" \
            --add-source . \
            --private . \
            --main "${APP_MAIN_FILE}" \
            --name "${APP_NAME}" \
            --version "${APP_VERSION}" \
            --package "${PACKAGE_NAME}" \
            --output "${APP_NAME}.apk"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: Guess the Number.apk
